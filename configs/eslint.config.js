const eslintJS = require("@eslint/js");
const globals = require("globals");
const cypressPlugin = require("eslint-plugin-cypress");
const jestPlugin = require("eslint-plugin-jest");

const standard = require("eslint-config-standard");

// These three are required by eslint-plugin-standard's rules
const nPlugin = require("eslint-plugin-n");
const promisePlugin = require("eslint-plugin-promise");
const importPlugin = require("eslint-plugin-import");

const teamsharesGlobalCustomRules = {
  quotes: [2, "double"],
  semi: ["error", "always"],
  "comma-dangle": ["error", "always-multiline"],
  "no-unused-vars": [
    "error",
    {
      argsIgnorePattern: "^_",
      varsIgnorePattern: "^_",
    },
  ],
};

// Low level helper to return configs set for different types of files
const buildConfigs = (customRules) => {
  const allRules = {
    ...standard.rules,
    ...teamsharesGlobalCustomRules,
    ...customRules,
  };

  const coreConfig = {
    languageOptions: {
      ecmaVersion: 2020,
      parserOptions: {
        // Note this is needed for esbuild to parse the "static targets" line of stimulus controllers...
        // *pretty* sure it doesn't mess with the languageOptions ecmaVersion defined above (:fingers-crossed:)
        ecmaVersion: "latest",
      },
    },
    plugins: {
      import: importPlugin,
      n: nPlugin,
      promise: promisePlugin,
    }, // These three were included by eslint-config-standard
    rules: allRules,
  };

  const browserConfig = { ...coreConfig };
  browserConfig.languageOptions = {
    ...browserConfig.languageOptions,
    globals: {
      Teamshares: "readonly",
      ...globals.browser
    },
  };

  const nodeConfig = { ...coreConfig };
  nodeConfig.languageOptions = {
    ...nodeConfig.languageOptions,
    globals: { ...globals.node },
  };

  const jestConfig = { ...browserConfig };
  jestConfig.plugins.jest = jestPlugin;
  jestConfig.languageOptions = {
    ...jestConfig.languageOptions,
    globals: {
      ...browserConfig.languageOptions.globals,

      // Partial list from manually debugging... will likely need to add additional globals here
      test: false,
      expect: false,
      describe: false,
      jest: false,
      global: false,
    },
  };

  const cypressConfig = { ...nodeConfig };
  cypressConfig.plugins.cypress = cypressPlugin;
  cypressConfig.languageOptions = {
    ...cypressConfig.languageOptions,
    globals: {
      ...browserConfig.languageOptions.globals, // In case any manual JS is done in tests (buyout has a direct File reference...)
      ...globals.node,

      // Manually pulled from: https://github.com/cypress-io/eslint-plugin-cypress/blob/master/index.js
      cy: false,
      Cypress: false,
      expect: false,
      assert: false,
      chai: false,

      // Just... seems necessary?
      it: false,
      describe: false,
      context: false,
      beforeEach: false,

      // Apparently also needed...
      xdescribe: false,
      xit: false,
    },
  };
  cypressConfig.rules = {
    ...cypressConfig.rules,

    // Manually pulled from: https://github.com/cypress-io/eslint-plugin-cypress#usage
    "cypress/no-assigning-return-values": "error",
    "cypress/no-unnecessary-waiting": "error",
    "cypress/assertion-before-screenshot": "warn",
    // "cypress/no-force": "warn",  // Very verbose, and doesn't appear to be included in their cypress:recommended preset
    "cypress/no-async-tests": "error",
    "cypress/no-pause": "error",
  };

  // Turn off camelcase -- ended up causing more confusion/churn than its worth when --fix tries to send camel-case versions of params
  // back to the rails server (from cypress factory calls)
  delete cypressConfig.rules.camelcase;

  return {
    coreConfig,
    nodeConfig,
    browserConfig,
    cypressConfig,
    jestConfig,
  };
};

// Higher level helper -- returns the full eslint config
const buildDefaultConfig = (customRules) => {
  const { browserConfig, nodeConfig, cypressConfig, jestConfig } = buildConfigs(customRules);

  return [
    eslintJS.configs.recommended,
    {
      ignores: [
        "coverage/**",
        "tmp/**",
        "app/assets/builds/**",
        "public/**",
        "vendor/**",
      ],
    },
    {
      files: ["*.config.js"],
      ...nodeConfig,
    },
    {
      files: ["cypress/**"],
      ...cypressConfig,
    },
    {
      files: ["app/javascript/test/**/*.js", "app/javascript/**/*.test.js"],
      ...jestConfig,
    },
    {
      files: ["app/javascript/**"],
      ignores: [
        "app/javascript/controllers/index.js", // Autogenerated, don't bother parsing
      ],
      ...browserConfig,
    },
  ];
};

module.exports = {
  buildConfigs,
  buildDefaultConfig,
};
