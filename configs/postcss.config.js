const tailwindDefaultConfig = require("./tailwind.config.js");

const isProd = process.env.RAILS_ENV === "production" || process.env.NODE_ENV === "production";
console.log(`Preparing to bundle CSS in ${isProd ? "PRODUCTION" : "development mode"}`);
APP_ROOT = process.cwd();

const path = require("path");
const { getTeamsharesRailsPath } = require("../lib/teamshares-rails-path");
const tsRailsPath = getTeamsharesRailsPath();

const injectSharedCodePaths = (config) => {
  config.content.push(path.join(process.cwd(), "**/*.scss").toString());
  config.content.push(`${tsRailsPath}/**/*.{html,js,rb,erb,slim}`);

  return config;
};

const defaultConfigTransformer = (config) => config;


const postcss = require('postcss');
const prefixComponentClasses = postcss.plugin('prefix-component-classes', () => {
    return (root, result) => {
      const matches = result.opts.from.match(/frontend\/components\/?(.*)\/[^/]+?.s?css$/);

      // Do not transform CSS files from outside of the components folder
      if (!matches) return;

      const identifier = matches[1].replaceAll("/", "--").replaceAll("_", "-");

      root.walkRules(rule => {
        console.log(`[${identifier}] ${rule.selector}`);
        rule.selector = `.c-${identifier} ${rule.selector}`;
      });
    };
});



const configBuilder = (tailwindConfigTransformer = defaultConfigTransformer) => {
  const baseConfig = injectSharedCodePaths(Object.assign({}, tailwindDefaultConfig));
  const tailwindConfig = tailwindConfigTransformer(baseConfig);

  const postcssConfig = {
    parser: "postcss-scss",
    plugins: [
      require("postcss-easy-import")({ path: [tsRailsPath, APP_ROOT], prefix: "_", extensions: [".css", ".scss"], plugins: [
        require("tailwindcss/nesting"),
        prefixComponentClasses,

        // This plugin enables CSS modules for ViewComponent companion CSS files
        // require("postcss-modules")({
        //   generateScopedName: (name, filename, _css) => {
        //     // TODO: can we only modularize single  *parent* style?

        //     const matches = filename.match(/frontend\/components\/?(.*)\/[^/]+?.s?css$/);

        //     // Do not transform CSS files from outside of the components folder
        //     if (!matches) return name;

        //     // identifier here must match what's generated by SharedUI::ApplicationComponent#identifier
        //     const identifier = matches[1].replaceAll("/", "--").replaceAll("_", "-");

        //     const wrapped = `.c-${identifier} .${name}`
        //     console.log(`[postcss-modules] [${filename}]...${name} => ${wrapped}`)

        //     // We also add the `c-` prefix to all components classes
        //     return wrapped;
        //   },
        //   // Do not generate *.css.json files (we don't use them)
        //   getJSON: () => {}
        // }),
      ] }),
      require("tailwindcss")(tailwindConfig),
      require("postcss-flexbugs-fixes"),
      require("postcss-preset-env")({
        autoprefixer: {
          flexbox: "no-2009",
        },
        features: {
          "nesting-rules": false, // Will be handled by tailwindcss/nesting, instead
        },
        stage: 3,
      }),
      isProd ? require("cssnano")({ preset: "default" }) : null,
      require("postcss-reporter")({ clearReportedMessages: true }),
    ].filter(Boolean),
  };

  return postcssConfig;
};

module.exports = { configBuilder };
